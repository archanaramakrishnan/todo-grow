{"ast":null,"code":"var _jsxFileName = \"/Users/archanaramki/Workspace/todo-grow/src/components/Tree.js\";\nimport { random } from \"nanoid\";\nimport React from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tree(props) {\n  function sketch(p5) {\n    let IS_LEAF = true;\n    let selfCareCount = 200;\n    function colorGreenIfLeaf(isLeaf) {\n      if (isLeaf) {\n        return {\n          r: 80 + p5.random(-20, 20),\n          g: 120 + p5.random(-20, 20),\n          b: 40 + p5.random(-20, 20),\n          transparency: 200\n        };\n      } else {\n        return {\n          r: 220 + p5.random(-20, 20),\n          g: 120 + p5.random(-20, 20),\n          b: 170 + p5.random(-20, 20),\n          transparency: 255\n        };\n      }\n    }\n    let width = p5.windowWidth;\n    let height = p5.windowHeight * 0.9;\n    p5.setup = () => {\n      p5.createCanvas(width, height, p5.WEBGL);\n      let blue1 = p5.color(255);\n      let blue2 = p5.color(63, 191, 191);\n      for (let y = 0; y < height; y++) {\n        let n = p5.map(y, 0, height, 0, 1);\n        let newc = p5.lerpColor(blue2, blue1, n);\n        p5.stroke(newc);\n        p5.line(0, y, width, y);\n      }\n      p5.angleMode(p5.DEGREES);\n      p5.noLoop();\n    };\n    p5.draw = () => {\n      // translate to the center of the screen\n      p5.translate(0, height / 2);\n      let branchLength = props.tasks;\n      if (branchLength < 150) {\n        branchLength = branchLength + props.tasks * 15;\n        console.log(props.tasks, branchLength);\n        p5.branch(branchLength);\n      } else {\n        p5.branch(branchLength);\n      }\n    };\n    p5.branch = len => {\n      p5.push();\n      if (len > 10) {\n        p5.strokeWeight(p5.map(len, 10, 100, 1, 15));\n        p5.stroke(70, 40, 20, 100);\n        //the y-coordinate of the second point should be negative of the length inorder for the tree to turn in the right direction\n        p5.line(0, 0, 0, -len);\n        //displace objects within the display window\n        //The x parameter specifies left/right translation, the y parameter specifies up/down translation.\n        p5.translate(0, -len); //translate to the end of the branch\n        p5.rotate(25);\n        p5.branch(len * p5.random(0.7, 0.9));\n        p5.rotate(p5.random(-50, -60));\n        p5.branch(len * p5.random(0.7, 0.9));\n      } else {\n        let r, g, b, transparency, color;\n        if (selfCareCount > 0) {\n          color = colorGreenIfLeaf(IS_LEAF);\n          IS_LEAF = !IS_LEAF; //a counter governs how many flowers are produced based on self care\n          selfCareCount--;\n        } else {\n          color = colorGreenIfLeaf(true);\n        }\n        r = color.r;\n        g = color.g;\n        b = color.b;\n        transparency = color.transparency;\n        p5.fill(r, g, b, transparency);\n        p5.noStroke();\n\n        //draw leaf\n        p5.beginShape();\n        for (let i = 45; i < 135; i++) {\n          let rad = 10;\n          let x = rad * p5.cos(i);\n          let y = rad * p5.sin(i);\n          p5.vertex(x, y);\n        }\n        for (let i = 135; i > 40; i--) {\n          let rad = 10;\n          let x = rad * p5.cos(i);\n          let y = rad * p5.sin(-i) + 15;\n          p5.vertex(x, y);\n        }\n        p5.endShape(p5.CLOSE);\n      }\n      p5.pop();\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n    sketch: sketch\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 10\n  }, this);\n}\n_c = Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["random","React","ReactP5Wrapper","Tree","props","sketch","p5","IS_LEAF","selfCareCount","colorGreenIfLeaf","isLeaf","r","g","b","transparency","width","windowWidth","height","windowHeight","setup","createCanvas","WEBGL","blue1","color","blue2","y","n","map","newc","lerpColor","stroke","line","angleMode","DEGREES","noLoop","draw","translate","branchLength","tasks","console","log","branch","len","push","strokeWeight","rotate","fill","noStroke","beginShape","i","rad","x","cos","sin","vertex","endShape","CLOSE","pop"],"sources":["/Users/archanaramki/Workspace/todo-grow/src/components/Tree.js"],"sourcesContent":["import { random } from \"nanoid\";\nimport React from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\n\nexport default function Tree(props) {\n  function sketch(p5) {\n    let IS_LEAF = true;\n    let selfCareCount = 200;\n    function colorGreenIfLeaf(isLeaf) {\n      if(isLeaf) {\n        return {\n          r: 80 + p5.random(-20, 20),\n          g: 120 + p5.random(-20, 20),\n          b: 40 + p5.random(-20, 20),\n          transparency: 200\n        }\n      }\n      else {\n        return {\n          r: 220 + p5.random(-20, 20),\n          g: 120 + p5.random(-20, 20),\n          b: 170 + p5.random(-20, 20),\n          transparency: 255\n        }\n      }\n    }\n\n    let width = p5.windowWidth;\n    let height = p5.windowHeight*0.9;\n  \n    p5.setup = () => { \n      p5.createCanvas(width, height, p5.WEBGL);\n      let blue1 = p5.color(255);\n      let blue2 = p5.color(63, 191, 191);\n  \n      for(let y=0; y<height; y++){\n        let n = p5.map(y,0,height,0,1);\n        let newc = p5.lerpColor(blue2,blue1,n);\n        p5.stroke(newc);\n        p5.line(0,y,width, y);\n      }\n      p5.angleMode(p5.DEGREES)\n      p5.noLoop()\n    }\n  \n    p5.draw = () => {\n      // translate to the center of the screen\n      p5.translate(0, height/2);\n\n      let branchLength = props.tasks;\n      if(branchLength < 150)\n      {\n        branchLength = branchLength + (props.tasks * 15);\n        console.log(props.tasks, branchLength)\n        p5.branch(branchLength)\n      }\n      else {\n        p5.branch(branchLength)\n      }\n      \n    }\n  \n    p5.branch = (len) => {\n      p5.push();\n      if(len > 10) {\n\n        p5.strokeWeight(p5.map(len, 10, 100, 1, 15))\n        p5.stroke(70, 40, 20, 100)\n        //the y-coordinate of the second point should be negative of the length inorder for the tree to turn in the right direction\n        p5.line(0, 0, 0, -len) \n        //displace objects within the display window\n        //The x parameter specifies left/right translation, the y parameter specifies up/down translation.\n        p5.translate(0, -len) //translate to the end of the branch\n        p5.rotate(25)\n        p5.branch(len * p5.random(0.7, 0.9))\n        p5.rotate(p5.random(-50, -60))\n        p5.branch(len * p5.random(0.7, 0.9))\n      } else {\n        let r, g, b, transparency, color;\n        if(selfCareCount > 0) {\n          \n          color = colorGreenIfLeaf(IS_LEAF)\n          IS_LEAF = !IS_LEAF; //a counter governs how many flowers are produced based on self care\n          selfCareCount--;\n        }\n        else {\n          color = colorGreenIfLeaf(true)\n        }\n        r = color.r\n        g = color.g\n        b = color.b\n        transparency = color.transparency;\n        \n        p5.fill(r, g, b, transparency);\n        p5.noStroke()\n        \n        //draw leaf\n        p5.beginShape()\n        for(let i=45; i<135; i++) {\n          let rad = 10;\n          let x = rad * p5.cos(i)\n          let y = rad * p5.sin(i)\n          p5.vertex(x, y)\n        }\n        for(let i=135; i>40; i--) {\n          let rad = 10;\n          let x = rad * p5.cos(i)\n          let y = rad * p5.sin(-i) + 15\n          p5.vertex(x, y)\n        }\n        p5.endShape(p5.CLOSE)\n      }\n      p5.pop();\n    };\n  }\n\n  return <ReactP5Wrapper sketch={sketch} />;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}